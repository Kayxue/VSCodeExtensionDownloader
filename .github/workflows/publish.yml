name: Flutter Desktop Release

on:
  push:
    # Trigger the workflow on pushes to the main branch
    # or when a new tag is pushed.
    branches:
      - master
    tags:
      - 'v*.*.*'
  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:

jobs:
  build:
    name: Build ${{ matrix.os }} on ${{ matrix.arch }}
    
    # Use a matrix strategy to run the same job on different OSes and architectures.
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS Universal Binary (x86_64 and arm64)
          - os: macos-latest
            platform: macos
            arch: universal
            
          # Windows x64
          - os: windows-latest
            platform: windows
            arch: x64
            
          # Linux x64
          - os: ubuntu-latest
            platform: linux
            arch: x64
            
          # Linux ARM64
          - os: ubuntu-24.04-arm
            platform: linux
            arch: arm64

          # Windows ARM64 
          # - os: windows-11-arm
          #   platform: windows
          #   arch: arm64
    
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🐦 Set up Flutter (MacOS, Windows x64, Linux x64)
        uses: subosito/flutter-action@v2
        if : ${{ !(matrix.platform == 'linux' && matrix.arch == 'arm64') && !(matrix.platform == 'windows' && matrix.arch == 'arm64') }}
        with:
          channel: 'stable'
      
      - name: ⚙️ Install dependencies from Apt (Linux ARM64)
        if: ${{ matrix.platform == 'linux' && matrix.arch == 'arm64' }}
        run: |
          sudo apt-get update -y;

          sudo apt-get install -y curl git unzip xz-utils zip libglu1-mesa clang cmake ninja-build pkg-config libstdc++-12-dev libgtk-3-dev liblzma-dev

      - name: ⬇️ Clone Flutter (Linux ARM64)
        if: ${{ matrix.platform == 'linux' && matrix.arch == 'arm64' }}
        run: |
          git clone --depth 1 --branch stable https://github.com/flutter/flutter.git $RUNNER_TEMP/flutter

          echo "$RUNNER_TEMP/flutter/bin" >> $GITHUB_PATH

      - name: ⚙️ Install Flutter (Linux ARM64)
        if: ${{ matrix.platform == 'linux' && matrix.arch == 'arm64' }}
        run: flutter doctor
      
      - name: ⬇️ Clone Flutter (Windows ARM64)
        if: ${{ matrix.platform == 'windows' && matrix.arch == 'arm64' }}
        run: |
          git clone --depth 1 --branch stable https://github.com/flutter/flutter.git $env:RUNNER_TEMP\flutter

          Add-Content $env:GITHUB_PATH "$env:RUNNER_TEMP\flutter\bin"
      
      - name: ⚙️ Install Flutter (Windows ARM64)
        if: ${{ matrix.platform == 'windows' && matrix.arch == 'arm64' }}
        # Running "flutter doctor" will download Flutter's dependencies
        run: flutter doctor
          
      - name: ⚙️ Install dependencies and enable desktop support
        run: |
          # Install dependencies required for the Linux build
          if [ "${{ matrix.platform }}" == "linux" ]; then
            sudo apt-get update
            sudo apt-get install -y libgtk-3-dev liblzma-dev
          fi
          # Enable the correct desktop platform based on the runner OS.
          flutter config --enable-${{ matrix.platform }}-desktop
        shell: bash
        
      - name: ⬇️ Get dependencies
        run: flutter pub get
        
      - name: 🛠️ Build for Release
        run: |
          # Build the Flutter app in release mode for the specified platform.
          # The architecture is automatically handled by the runner.
          if [ "${{ matrix.platform }}" == "linux" ]; then
            flutter build linux --release --target-platform=linux-${{ matrix.arch }}
          else
            flutter build ${{ matrix.platform }} --release
          fi
        shell: bash

      - name: ⚙️ Install appdmg (MacOS)
        if: matrix.platform == 'macos'
        run: |
          npm install -g appdmg
      
      - name: 📦 Create macOS dmg
        if: matrix.platform == 'macos'
        run: |
          appdmg config.json "${{ github.event.repository.name }}-${{ matrix.platform }}-${{ matrix.arch }}.dmg"
        
      - name: ⬆️ Upload Artifacts for MacOS
        uses: actions/upload-artifact@v4
        if: matrix.platform == 'macos'
        with:
          name: ${{ github.event.repository.name }}-${{ matrix.platform }}-${{ matrix.arch }}
          path: ${{ github.event.repository.name }}-${{ matrix.platform }}-${{ matrix.arch }}.dmg
      
      - name: 📦 Compress folder for Linux
        if: matrix.platform == 'linux'
        run: |
          zip -r -9 "${{ github.event.repository.name }}-${{ matrix.platform }}-${{ matrix.arch }}.zip" build/${{ matrix.platform }}/${{ matrix.arch }}/release/bundle/
        shell: bash

      - name: ⬆️ Upload Artifacts for Linux
        uses: actions/upload-artifact@v4
        if: matrix.platform == 'linux'
        with:
          name: ${{ github.event.repository.name }}-${{ matrix.platform }}-${{ matrix.arch }}
          path: ${{ github.event.repository.name }}-${{ matrix.platform }}-${{ matrix.arch }}.zip

      - name: 📦 Compress folder for Windows
        if: matrix.platform == 'windows'
        run: |
          $source = "build/${{ matrix.platform }}/${{ matrix.arch }}/runner/Release/"
          $destination = "${{ github.event.repository.name }}-${{ matrix.platform }}-${{ matrix.arch }}.zip"
          Compress-Archive -Path $source -DestinationPath $destination

      - name: ⬆️ Upload Artifacts for Windows
        uses: actions/upload-artifact@v4
        if: matrix.platform == 'windows'
        with:
          name: ${{ github.event.repository.name }}-${{ matrix.platform }}-${{ matrix.arch }}
          path: ${{ github.event.repository.name }}-${{ matrix.platform }}-${{ matrix.arch }}.zip
          
  create_release:
    name: Create GitHub Release
    # This job depends on the successful completion of the build job.
    needs: [build]
    
    # This job only runs if the workflow was triggered by a tag push.
    if: startsWith(github.ref, 'refs/tags/')
    
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: ⬇️ Download all artifacts
        # Downloads all artifacts from the 'build' job.
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      - name: 📝 Create release notes
        id: release_notes
        run: |
          echo "tag=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"
          echo "name=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"
          echo "body=### What's new in this release" >> "$GITHUB_OUTPUT"
          echo "body+=$(git log --pretty=format:'- %s' -n 1)" >> "$GITHUB_OUTPUT"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🚀 Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          draft: false
          prerelease: false
          tag_name: ${{ steps.release_notes.outputs.tag }}
          name: ${{ steps.release_notes.outputs.name }}
          body: ${{ steps.release_notes.outputs.body }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}